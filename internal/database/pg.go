package database

import (
	"fmt"
	"log"
	"strconv"
	"sync"
	"time"

	"github.com/csye7125-su24-team06/webapp-cve-consumer/internal/env"
	"github.com/jackc/pgx/v5/pgconn"
	"gorm.io/driver/postgres"
	"gorm.io/gorm"
	"gorm.io/gorm/logger"
	"gorm.io/gorm/schema"
)

type postgresDataSource struct {
	db *gorm.DB
	mutex *sync.Mutex
}

func NewPostgresDataSource() DataSource {
	return &postgresDataSource{
		mutex: &sync.Mutex{},
	}
}

func (pg *postgresDataSource) Init() {
	err := pg.connect()
	pg.HandleConnectionError(err)
}

func (pg *postgresDataSource) Get() *gorm.DB {
	return pg.db
}

func (pg *postgresDataSource) IsConnectionError(err error) bool {
	_, ok := err.(*pgconn.ConnectError)
	return ok
}

func (pg *postgresDataSource) HandleConnectionError(err error) {
	if err != nil && pg.IsConnectionError(err) {

		postgresRetryCount, _ := strconv.Atoi(env.GetEnvOrDefault("POSTGRES_RETRY_COUNT", "100"))
		postgresRetryBackoffSeconds, _ := strconv.Atoi(env.GetEnvOrDefault("POSTGRES_RETRY_BACKOFF_SECONDS", "6"))

		// Retry connecting to the database
		log.Printf("Retrying database connection with retry count: %v\n", postgresRetryCount)

		for i := 0; i < postgresRetryCount; i++ {
			err = pg.connect()
			if err == nil {
				return
			} else {
				log.Printf("Database connection failed. Retry count: %v. Waiting %v seconds and retrying...\n", i, postgresRetryBackoffSeconds)
				time.Sleep(time.Duration(postgresRetryBackoffSeconds) * time.Second)
			}
		}
		
		// If the database connection fails after the retries, the application will exit
		log.Fatalf("Database connection failed after %v retries", postgresRetryCount)
	}
}

func (pg *postgresDataSource) Close() {
	if pg.db != nil {
		sqlDB, _ := pg.db.DB()
		if sqlDB != nil {
			sqlDB.Close()
		}
	}
}

func (pg *postgresDataSource) connect() error {
	// Lock the mutex to prevent multiple connections
	pg.mutex.Lock()

	// create the connection string
	dsn := fmt.Sprintf("host=%v user=%v password=%v dbname=%v port=%v",
		env.GetEnvOrDefault("DB_HOST", "localhost"),
		env.GetEnvOrDefault("DB_USER", ""),
		env.GetEnvOrDefault("DB_PASSWORD", ""),
		env.GetEnvOrDefault("DB_DATABASE", "database"),
		env.GetEnvOrDefault("DB_PORT", "5432"))

	// connect to the database
	db, err := gorm.Open(postgres.Open(dsn), &gorm.Config{
		Logger: logger.Default.LogMode(logger.Silent),
		NamingStrategy: schema.NamingStrategy{
			TablePrefix: "cve.",
		},
	})

	pg.mutex.Unlock()

	if err != nil {
		return err
	}

	pg.db = db
	log.Println("Connected to database")
	return nil
}
