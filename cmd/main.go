package main

import (
	"os"
	"os/signal"
	"syscall"
	"time"

	env "github.com/csye7125-su24-team06/webapp-cve-consumer/internal"
	"github.com/csye7125-su24-team06/webapp-cve-consumer/internal/api"
	"github.com/csye7125-su24-team06/webapp-cve-consumer/internal/kafka"
	"github.com/csye7125-su24-team06/webapp-cve-consumer/pkg/database"
	"github.com/joho/godotenv"
	"github.com/sirupsen/logrus"
)

type UTCFormatter struct {
	logrus.Formatter
}

func (u UTCFormatter) Format(e *logrus.Entry) ([]byte, error) {
	e.Time = e.Time.UTC()
	return u.Formatter.Format(e)
}

func main() {
	logrus.SetFormatter(UTCFormatter{&logrus.JSONFormatter{}})
	env.Init()

	// Graceful Shutdown
	gracefulShutdown()

	godotenv.Load()

	// Consumer for Kafka
	go func() {
		env.GlobalContextInstance.SetAlive()
		defer env.GlobalContextInstance.Close()

		// Initializing Postgres
		database.InitPostgres()

		// Restarting consumer when it is not closed
		count := 0
		for kafka.KafkaConsumerObject == nil || !kafka.KafkaConsumerObject.IsClosed() {
			logrus.Printf("Starting Consumer. Restart counter: %v ", count)
			if consumer := kafka.GetKafkaConsumer(); consumer != nil {
				consumer.Consume()
			} else {
				time.Sleep(5 * time.Second)
				logrus.Println("Unable to start consumer. Retrying after 5 seconds...")
			}
			count += 1
			env.ConsumerRestarts.Inc()
		}
	}()

	api.StartServer()
}

func gracefulShutdown() {
	sigc := make(chan os.Signal, 1)
	signal.Notify(sigc,
		syscall.SIGHUP,
		syscall.SIGINT,
		syscall.SIGTERM,
		syscall.SIGQUIT)

	go func() {
		<-sigc

		logrus.Println("Disconnecting Database...")

		if database.DataSource != nil {
			pgDB, err := database.DataSource.DB()
			if err != nil {
				logrus.Println("DB Object not found")
			} else {
				if err = pgDB.Close(); err != nil {
					logrus.Println("DB Connection was not closed")
				}
			}
		}

		logrus.Println("Disconnecting Kafka Client...")
		if kafka.KafkaConsumerObject != nil {
			if err := kafka.KafkaConsumerObject.Close(); err != nil {
				logrus.Println("Kafka consumer close failure")
			}
		}

		logrus.Println("Shutting Down Server...")
		if err := api.Server.Close(); err != nil {
			logrus.Println("Server close failure")
		}

		logrus.Println("Cleanup Completed!")
		os.Exit(0)
	}()
}
